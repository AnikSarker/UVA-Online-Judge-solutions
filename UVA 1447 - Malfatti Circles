#include <bits/stdc++.h>
#define EPS 1e-6
#define MAX 10005
#define PI acos(-1)
using namespace std;

using namespace std;
typedef pair<int,int> pii;
const double pi = 4 * atan(1);
const double eps = 1e-6;

inline int dcmp (double x) { if (fabs(x) < eps) return 0; else return x < 0 ? -1 : 1; }
inline double getDistance (double x, double y) { return sqrt(x * x + y * y); }

struct Point {
    double x, y;
    Point (double x = 0, double y = 0): x(x), y(y) {}

    Point operator + (const Point& u) { return Point(x + u.x, y + u.y); }
    Point operator - (const Point& u) { return Point(x - u.x, y - u.y); }
    Point operator * (const double u) { return Point(x * u, y * u); }
    Point operator / (const double u) { return Point(x / u, y / u); }
};
typedef Point Vector;


struct Circle {
    Point o;
    double r;
    Circle () {}
    Circle (Point o, double r = 0): o(o), r(r) {}
    Point point(double rad) { return Point(o.x + cos(rad)*r, o.y + sin(rad)*r); }
    double getArea (double rad) { return rad * r * r / 2; }
};

namespace Vectorial {
    double getDot (Vector a, Vector b) { return a.x * b.x + a.y * b.y; }
    double getCross (Vector a, Vector b) { return a.x * b.y - a.y * b.x; }
    double getLength (Vector a) { return sqrt(getDot(a, a)); }
};

namespace Linear {
    using namespace Vectorial;
    double getDistanceToLine (Point p, Point a, Point b) { return fabs(getCross(b-a, p-a) / getLength(b-a)); }
}

namespace Circular {
    using namespace Linear;
    using namespace Vectorial;

    Circle InscribedCircle(Point p1, Point p2, Point p3) {
        double a = getLength(p2 - p3);
        double b = getLength(p3 - p1);
        double c = getLength(p1 - p2);
        Point p = (p1 * a + p2 * b + p3 * c) / (a + b + c);
        return Circle(p, getDistanceToLine(p, p1, p2));
    }
};

int main(){
    double x1,y1,x2,y2,x3,y3;
    while(scanf("%lf %lf %lf %lf %lf %lf",&x1,&y1,&x2,&y2,&x3,&y3)==6 && (x1 || y1 || x2 || y2 || x3 || y3)){
        Point p1=Point(x1,y1);
        Point p2=Point(x2,y2);
        Point p3=Point(x3,y3);

        using namespace Circular;
        double a=getLength(p2 - p3);
        double b=getLength(p3 - p1);
        double c=getLength(p1 - p2);

        Circle In=InscribedCircle(p1,p2,p3);
        Point p=In.o;
        double r=In.r;
        double s=(a+b+c)/2;

        double d=getDistance(p.x-p1.x,p.y-p1.y);
        double e=getDistance(p.x-p2.x,p.y-p2.y);
        double f=getDistance(p.x-p3.x,p.y-p3.y);

        double r1=r/(2*(s-a))*(s+d-r-e-f);
        double r2=r/(2*(s-b))*(s+e-r-d-f);
        double r3=r/(2*(s-c))*(s+f-r-d-e);

        printf("%lf %lf %lf\n",r1,r2,r3);
    }
}
