#include<bits/stdc++.h>
using namespace std;
#define MAX 55

const double eps = 1e-6;
inline int dcmp (double x) { if (fabs(x) < eps) return 0; else return x < 0 ? -1 : 1; }

struct Point {
    double x, y;
    Point (double x = 0, double y = 0): x(x), y(y) {}

    Point operator + (const Point& u) { return Point(x + u.x, y + u.y); }
    Point operator - (const Point& u) { return Point(x - u.x, y - u.y); }
    Point operator * (const double u) { return Point(x * u, y * u); }
    Point operator / (const double u) { return Point(x / u, y / u); }
    double operator * (const Point& u) { return x*u.y - y*u.x; }
};

typedef Point Vector;

namespace Punctual {
    double getDistance (Point a, Point b) { double x=a.x-b.x, y=a.y-b.y; return sqrt(x*x + y*y); }
};

namespace Vectorial {
    double getDot (Vector a, Vector b) { return a.x * b.x + a.y * b.y; }
    double getCross (Vector a, Vector b) { return a.x * b.y - a.y * b.x; }
    double getLength (Vector a) { return sqrt(getDot(a, a)); }
    double getPLength (Vector a) { return getDot(a, a); }
    double getAngle (Vector u) { return atan2(u.y, u.x); }
    double getAngle (Vector a, Vector b) { return acos(getDot(a, b) / getLength(a) / getLength(b)); }
    Vector rotate (Vector a, double rad) { return Vector(a.x*cos(rad)-a.y*sin(rad), a.x*sin(rad)+a.y*cos(rad)); }
    Vector getNormal (Vector a) { double l = getLength(a); return Vector(-a.y/l, a.x/l); }
};

namespace Linear{
    using namespace Vectorial;
    using namespace Punctual;

    bool haveIntersection (Point a1, Point a2, Point b1, Point b2) {
        double c1=getCross(a2-a1, b1-a1), c2=getCross(a2-a1, b2-a1), c3=getCross(b2-b1, a1-b1), c4=getCross(b2-b1,a2-b1);
        return dcmp(c1)*dcmp(c2) <= 0 && dcmp(c3)*dcmp(c4) <= 0;
    }

    //Minimum distance between corresponding points of two segments
    double SegmentSegmentPointDIst(Point a1,Point a2,Point b1,Point b2){
        double lo=0;
        double hi=1;
        double mid1,mid2,val1,val2;
        for(int i=1;i<=100;i++){
            mid1=lo+(hi-lo)/3;
            mid2=hi-(hi-lo)/3;

            val1=getDistance(a1*mid1+a2*(1-mid1),b1*mid1+b2*(1-mid1));
            val2=getDistance(a1*mid2+a2*(1-mid2),b1*mid2+b2*(1-mid2));

            if(val1<val2) hi=mid2;
            else lo=mid1;
        }
        return val1;
    }
}

Point Path1[MAX];
Point Path2[MAX];
vector<Point>P1;
vector<Point>P2;


int main(){
    using namespace Punctual;
    using namespace Vectorial;
    using namespace Linear;

    int t;
    scanf("%d",&t);

    for(int cs=1;cs<=t;cs++){
        int A,B;
        scanf("%d %d",&A,&B);

        for(int i=1;i<=A;i++) scanf("%lf %lf",&Path1[i].x,&Path1[i].y);
        for(int i=1;i<=B;i++) scanf("%lf %lf",&Path2[i].x,&Path2[i].y);

        double dist1=0;  for(int i=2;i<=A;i++) dist1+=getDistance(Path1[i-1],Path1[i]);
        double dist2=0;  for(int i=2;i<=B;i++) dist2+=getDistance(Path2[i-1],Path2[i]);

        P1.clear(); P2.clear();
        P1.push_back(Path1[1]); P2.push_back(Path2[1]);

        int indx1=2;
        int indx2=2;
        while(indx1<A || indx2<B){
            double Ratio1=getDistance(P1.back(),Path1[indx1])/dist1;
            double Ratio2=getDistance(P2.back(),Path2[indx2])/dist2;
            Vector vec1=Path1[indx1]-P1.back();
            Vector vec2=Path2[indx2]-P2.back();
            vec1=vec1/getLength(vec1);
            vec2=vec2/getLength(vec2);

            if(Ratio1<Ratio2) {P2.push_back(P2.back()+vec2*Ratio1*dist2); P1.push_back(Path1[indx1++]);}
            else              {P1.push_back(P1.back()+vec1*Ratio2*dist1); P2.push_back(Path2[indx2++]);}
        }

        P1.push_back(Path1[A]); P2.push_back(Path2[B]);

        double Max=getDistance(P1[0],P2[0]);
        double Min=getDistance(P1[0],P2[0]);

        for(int i=1;i<P1.size();i++){
            double Ratio=getDistance(P1[i-1],P1[i])/dist1;

            Max=max(Max,getDistance(P1[i],P2[i]));
            Min=min(Min,SegmentSegmentPointDIst(P1[i-1],P1[i],P2[i-1],P2[i]));
        }

        double DogDist=Max-Min;
        printf("Case %d: %.0lf\n",cs,DogDist);
    }
}
