#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define mod 100000007

ll bigmod(ll n,ll r,ll MOD){
    if(r==0) return 1LL;
    ll ret=bigmod(n,r/2,MOD);
    ret=(ret*ret)%MOD;
    if(r%2==1) ret=(ret*n)%MOD;
    return ret;
}

//a^x=b(mod p)
//Shank's Baby Step Giant Step Algorithm
map<ll,int>MAP;
map<ll,int>:: iterator it;
ll Baby_step_Giant_step(ll a,ll b,ll p){
	MAP.clear();
	ll m=sqrt(p);
    ll now=1;

	for(int i=0;i<m;i++){
		MAP.insert(make_pair(now,i));
        now=(now*a)%p;
	}

	ll POW=bigmod(a,m,p);
	ll INV=bigmod(POW,p-2,p);

    now=b;
	for(int i=0;i<m;i++) {
		it=MAP.find(now);
		if(it!=MAP.end()) return i*m+it->second;
		now=(now*INV)%p;
	}
	return 0;
}

//Finding Solution Count for fixed M
int N,K,B,R;
set<int>Col;
map<int,vector<int> >Blocked;
set<int>:: iterator sIt;

ll val(ll len){
    if(len==0) return 1;
    else if(len==1) return K;
    else return (K*(bigmod(K-1,len-1,mod)))%mod;
}

ll solve(ll M){
    if(M==0) return 0;

    ll ans=1;
    ll lastC=0;

    ll Full=(K*bigmod(K-1,M-1,mod))%mod;
    ll Inside;

    for(sIt=Col.begin();sIt!=Col.end();sIt++){
        ll curC=*sIt;
        Inside=bigmod(Full,curC-lastC-1,mod);
        ans=(ans*Inside)%mod;

        ll lastR=0;
        for(int i=0;i<Blocked[curC].size();i++){
            ll curR=Blocked[curC][i];
            Inside=val(curR-lastR-1);
            ans=(ans*Inside)%mod;
            lastR=curR;
        }
        Inside=val(M-lastR);
        ans=(ans*Inside)%mod;
        lastC=curC;
    }
    Inside=bigmod(Full,N-lastC,mod);
    ans=(ans*Inside)%mod;
    return ans;
}

ll go(ll M,ll R){
    if(solve(M)==R) return M;
    ll W=solve(M+1);
    if(W==R) return M+1;

    R=(R*bigmod(W,mod-2,mod))%mod;

    ll ret=Baby_step_Giant_step(bigmod(K-1,N,mod),R,mod);
    return (ret+M+1)%mod;
}

int main(){
    int t;
    scanf("%d",&t);

    for(int cs=1;cs<=t;cs++){
        int a,b;
        scanf("%d %d %d %d",&N,&K,&B,&R);

        Col.clear();
        Blocked.clear();

        int M=0;
        for(int i=1;i<=B;i++){
            scanf("%d %d",&a,&b);
            Col.insert(b);
            Blocked[b].push_back(a);
            M=max(M,a);
        }
        printf("Case %d: %lld\n",cs,go(M,R));
    }
}
